//----------------------------------------
//----------------- BATBOT ---------------
//----------------------------------------

#include <IRremote.h>
#include <Servo.h>
#include "TimeLib.h"

#define null 0

//----------------------------------------
//----------- IR REMOTE CODES ------------

#define IR_FORWARD 16736925
#define IR_BACK    16754775
#define IR_LEFT    16720605
#define IR_RIGHT   16761405
#define IR_STOP    16712445
#define IR_ONE     16738455
#define IR_TWO     16750695
#define IR_THREE   16756815
#define IR_FOUR    16724175
#define IR_FIVE    16718055
#define IR_SIX     16743045
#define IR_SEVEN   16716015
#define IR_EIGHT   16726215
#define IR_NINE    16734885
#define IR_ZERO    16730805
#define IR_STAR    16728765
#define IR_SHARP   16732845

//----------------------------------------
//-------------- COMMANDS ----------------

#define SET_TIME          88 // 'X'
#define SET_JOYSTICK      89 // 'Y'
#define UPARROW           70 // 'F'
#define DOWNARROW         66 // 'B'
#define RIGHTARROW        82 // 'R'
#define LEFTARROW         76 // 'L'
#define ALLSTOP           72 // 'H'
#define DO_FUNCTION_ONE   49 // '1'
#define DO_FUNCTION_TWO   50 // '2'
#define DO_FUNCTION_THREE 51 // '3'
#define DO_FUNCTION_FOUR  52 // '4'
#define DO_FUNCTION_FIVE  53 // '5'
#define DO_FUNCTION_SIX   54 // '6'
#define DO_FUNCTION_SEVEN 55 // '7'
#define DO_FUNCTION_EIGHT 56 // '8'
#define DO_FUNCTION_NINE  57 // '9'
#define DO_FUNCTION_ZERO  48 // '0'
#define DO_FUNCTION_STAR  42 // '*'
#define DO_FUNCTION_SHARP 35 // '#'

#define GAME_W            87 // 'W'
#define GAME_A            65 // 'A'
#define GAME_S            83 // 'S'
#define GAME_D            68 // 'D'
#define GAME_STOP         32 // ' '

//----------------------------------------
//-------------- HARDWARE ----------------

#define RECV_PIN   12
#define SRVO_PIN    3

#define ENB         5  // Left  wheel speed
#define IN1         7  // Left  wheel forward
#define IN2         8  // Left  wheel reverse
#define IN3         9  // Right wheel reverse
#define IN4        11  // Right wheel forward
#define ENA         6  // Right wheel speed

int Echo =         A4; // ultrasonic
int Trig =         A5; // ultrasonic

//----------------------------------------
//--------------- TIMING -----------------

#define cameraStart  90
#define moveFast        500
#define moveNormal      750
#define moveSlow       1000

//----------------------------------------
//-------------- SENSORS -----------------

//Line Tracking IO define
#define LT_R !digitalRead(10)
#define LT_M !digitalRead(4)
#define LT_L !digitalRead(2)

unsigned int lt_r, lt_m, lt_l;
unsigned int previous_lt_r, previous_lt_m, previous_lt_l;

//----------------------------------------
//--------------- CAR SPEED --------------

#define DEFAULT_SPEED 200  // initial speed of car >=0 to <=255
#define MAX_CAR_SPEED 255  // max speed of car
#define OFFSET_SPEED (MAX_CAR_SPEED - DEFAULT_SPEED)

char direction                = ALLSTOP;
char *state                   = "default";
char *motion                  = "stopped";

//----------------------------------------
//-------------- DISTANCE ----------------

#define MINIMUM_SAFE_DISTANCE 10

unsigned int rightDistance    = 0;
unsigned int leftDistance     = 0;
unsigned int aheadDistance    = 0;
unsigned int distance         = 0;
unsigned int previousDistance = 0;

int previousDistanceAngle     = 0;
int distanceDelta             = 3;

//----------------------------------------
//--------------- ANGLES -----------------

int cameraAngle               = cameraStart;
int previousCameraAngle       = cameraStart;
int servoDelta                = 0; // for cameraAngle movement

//----------------------------------------
//-------------- INFRA RED ---------------

IRrecv irrecv(RECV_PIN);
decode_results results;

unsigned long ir_value;

//----------------------------------------
//--------------- SERIAL -----------------

unsigned long se_value;
int followState               = 0;
int avoidState                = 0;
int mapState                  = 0;

//----------------------------------------
//--------------- SERVO ------------------

Servo myservo; // used to control the ultrasonics servo

//----------------------------------------
//--------------- CLOCKS -----------------

#define TIME_MSG_LEN           11  // sync is TIME_HEADER then ten ascii digits
#define TIME_HEADER            'T' // command for serial time sync
#define YEAR_OFFSET          1900
#define MONTH_OFFSET            1

int initialized               = 0;

// FIXME: still need to adjust for daylight savings time here
int adjustTimeZone            = -(7 * 60 * 60);

time_t curMillis              = 0L;
time_t prvMillis              = 0L;
time_t senMillis              = 0L;
time_t ircMillis              = 0L;
time_t srvMillis              = 0L;
time_t joystick               = 0L;

//----------------------------------------
//--------------- COMMAND ----------------

char *raw_cmd = null;
int cmd = 0;
long servo_movement_time; // time servo last moved

boolean have_cmd = 0;
boolean move_servo = 0;
boolean send_sensor_data = 0;
boolean read_time_value = 0;
boolean read_joystick = 0;
boolean good = 0;

//----------------------------------------
//------------ MISCELLANEOUS -------------

int servoSpeed = moveSlow;
int sensorSpeed = moveNormal;

char buffer[42];
char camera[42];
char status[64];
char number[16];

//========================================

int speed_delta() {
  // compute range DEFAULT_SPEED .. MAX_CAR_SPEED
  // (joystick / 9) == (x / OFFSET_SPEED).  solve for x then adjust
  return int((joystick / 9.0) * OFFSET_SPEED);
}

void forward(){
  motion = "forward";
  direction = UPARROW;
  analogWrite(ENA, DEFAULT_SPEED + speed_delta());
  analogWrite(ENB, DEFAULT_SPEED + speed_delta());
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void back() {
  motion = "back";
  direction = DOWNARROW;
  analogWrite(ENA, DEFAULT_SPEED + speed_delta());
  analogWrite(ENB, DEFAULT_SPEED + speed_delta());
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void left() {
  motion = "left";
  direction = LEFTARROW;
  analogWrite(ENA, DEFAULT_SPEED + speed_delta());
  analogWrite(ENB, DEFAULT_SPEED + speed_delta());
  digitalWrite(IN1, LOW);
  digitalWrite(IN2, HIGH);
  digitalWrite(IN3, LOW);
  digitalWrite(IN4, HIGH);
}

void right() {
  motion = "right";
  direction = RIGHTARROW;
  analogWrite(ENA, DEFAULT_SPEED + speed_delta());
  analogWrite(ENB, DEFAULT_SPEED + speed_delta());
  digitalWrite(IN1, HIGH);
  digitalWrite(IN2, LOW);
  digitalWrite(IN3, HIGH);
  digitalWrite(IN4, LOW);
}

void stop() {
  motion = "stopped";
  direction = ALLSTOP;
  digitalWrite(ENA, LOW);
  digitalWrite(ENB, LOW);
}

// ultrasonic distance measurement
int get_distance() {
  digitalWrite(Trig, LOW);
  delayMicroseconds(2);
  digitalWrite(Trig, HIGH);
  delayMicroseconds(10);
  digitalWrite(Trig, LOW);
  distance = (int)pulseIn(Echo, HIGH) / 58;
  if (distance > 0 && distance <= MINIMUM_SAFE_DISTANCE) {
    println("MINIMUM_SAFE_DISTANCE!", 1);
    function_ok(); // stop
    function_eight(); // print distance values
  }
  return distance;
}

void get_distance_using_bounce_wrapper() {
  distance = get_distance();
  if (is_outside_delta(distance, previousDistance, distanceDelta)) {
    distance = get_distance();
    if (distance > 50000) {
      distance = get_distance();
    }
  }
}

void setup() {
  myservo.attach(SRVO_PIN);
  Serial.begin(9600);
  pinMode(Echo, INPUT);
  pinMode(Trig, OUTPUT);
  pinMode(IN1, OUTPUT);
  pinMode(IN2, OUTPUT);
  pinMode(IN3, OUTPUT);
  pinMode(IN4, OUTPUT);
  pinMode(ENA, OUTPUT);
  pinMode(ENB, OUTPUT);
  irrecv.enableIRIn();
  println("Ready", 1);
  delayMicroseconds(3);
}

void loop() {
  curMillis = millis();
  if (initialized) {
    if ((curMillis - prvMillis) > 5000) {
      prvMillis = curMillis;
      show_state();
    }
    // the IR button effects only last 1 second
    if (ircMillis != 0) {
      if (have_cmd && (curMillis - ircMillis) > 1000) {
        stop();
        have_cmd = 0;
        ircMillis = 0L;
      }
    }
  }

  // check interrupt
  if (irrecv.decode(&results)) {
    ir_value = results.value;
    irrecv.resume();
    if (ir_value != -1) {
      ircMillis = millis();
      raw_cmd = null;
      cmd = 0;
      if (ir_value == IR_FORWARD) {
        raw_cmd = "--> IR_FORWARD";
        cmd = UPARROW;
        have_cmd = 1;
      }
      else if (ir_value == IR_BACK) {
        raw_cmd = "--> IR_BACK";
        cmd = DOWNARROW;
        have_cmd = 1;
      }
      else if (ir_value == IR_RIGHT) {
        raw_cmd = "--> IR_RIGHT";
        cmd = RIGHTARROW;
        have_cmd = 1;
      }
      else if (ir_value == IR_LEFT) {
        raw_cmd = "--> IR_LEFT";
        cmd = LEFTARROW;
        have_cmd = 1;
      }
      else if (ir_value == IR_STOP) {
        raw_cmd = "--> IR_STOP";
        cmd = ALLSTOP;
        have_cmd = 1;
      }
      else if (ir_value == IR_ONE) {
        raw_cmd = "--> IR_ONE";
        cmd = DO_FUNCTION_ONE;
        have_cmd = 1;
      }
      else if (ir_value == IR_TWO) {
        raw_cmd = "--> IR_TWO";
        cmd = DO_FUNCTION_TWO;
        have_cmd = 1;
      }
      else if (ir_value == IR_THREE) {
        raw_cmd = "--> IR_THREE";
        cmd = DO_FUNCTION_THREE;
        have_cmd = 1;
      }
      else if (ir_value == IR_FOUR) {
        raw_cmd = "--> IR_FOUR";
        cmd = DO_FUNCTION_FOUR;
        have_cmd = 1;
      }
      else if (ir_value == IR_FIVE) {
        raw_cmd = "--> IR_FIVE";
        cmd = DO_FUNCTION_FIVE;
        have_cmd = 1;
      }
      else if (ir_value == IR_SIX) {
        raw_cmd = "--> IR_SIX";
        cmd = DO_FUNCTION_SIX;
        have_cmd = 1;
      }
      else if (ir_value == IR_SEVEN) {
        raw_cmd = "--> IR_SEVEN";
        cmd = DO_FUNCTION_SEVEN;
        have_cmd = 1;
      }
      else if (ir_value == IR_EIGHT) {
        raw_cmd = "--> IR_EIGHT";
        cmd = DO_FUNCTION_EIGHT;
        have_cmd = 1;
      }
      else if (ir_value == IR_NINE) {
        raw_cmd = "--> IR_NINE";
        cmd = DO_FUNCTION_NINE;
        have_cmd = 1;
      }
      else if (ir_value == IR_ZERO) {
        raw_cmd = "--> IR_ZERO";
        cmd = DO_FUNCTION_ZERO;
        have_cmd = 1;
      }
      else if (ir_value == IR_STAR) {
        raw_cmd = "--> IR_STAR";
        cmd = DO_FUNCTION_STAR;
        have_cmd = 1;
      }
      else if (ir_value == IR_SHARP) {
        raw_cmd = "--> IR_SHARP";
        cmd = DO_FUNCTION_SHARP;
        have_cmd = 1;
      }

      if (raw_cmd != null) {
        println(raw_cmd, 1);
      }

      if (have_cmd) {
        initialized = 1; // fake it for IR
        good = execute_command(cmd);
      }
    }
  }

  // handle input from Jetson Nano
  if (Serial.available()) {

    if (! initialized || read_time_value > 0) {
      read_time_value = 0;
      setArduinoTime();
    }

    if (initialized) {
      // get the SET_JOYSTICK value
      if (read_joystick) {
        read_joystick = 0;
        joystick = (time_t) read_python_int_value();
        print("joystick=", 1);
        println(toString(joystick), 0);
      }
    }

    // read next command from jetson nano
    if (initialized) {
      se_value = Serial.read();
      good = execute_command(se_value);
    }
  }

  if (initialized) {
    send_sensor_data = (millis() - senMillis > sensorSpeed) ? 1 : 0;
    if (send_sensor_data) {
      transmit_sensor_data(servoSpeed);
      senMillis = millis();
    }
  }

  // check for special run states
  if (*state != 'd') {        // 'default'
    if (*state == 's') {      // 'security'
      function_zero();
    }
    else if (*state == 'f') { // 'following'
      function_sharp();
    }
    else if (*state == 'a') { // 'avoid'
      function_star();
    }
    else if (*state == 'm') { // 'map'
      function_five();
    }
  }
}

uint32_t read_python_int_value() {
  int count = 0;
  char byte1 = 0;
  char byte2 = 0;
  char byte3 = 0;
  char byte4 = 0;
  while (count < 4) {
    if (Serial.available()) {
      ++count;
      switch(count) {
        case 1:
          Serial.readBytes(&byte1, 1);
          break;
        case 2:
          Serial.readBytes(&byte2, 1);
          break;
        case 3:
          Serial.readBytes(&byte3, 1);
          break;
        case 4:
          Serial.readBytes(&byte4, 1);
      }
    }
    else {
      delayMicroseconds(300);
    }
  }
  uint32_t value = ((uint32_t)byte1 << 24) + ((uint32_t)byte2 << 16) + ((uint32_t)byte3 << 8) + (uint32_t)byte4; // big-endian
  print("VALUE READ=", 1);
  snprintf(buffer, sizeof(buffer), " %0ld ", (long) value);
  Serial.print(buffer);
  println("", 0);
  return value;
}

void set_angle(int newAngle, int newDelta) {
  cameraAngle = newAngle;
  servoDelta = newDelta;
}

void increment_angle() {
  if (servoDelta != 0) {
    cameraAngle += servoDelta;
    if (cameraAngle > 160) {
      servoDelta = -servoDelta;
      cameraAngle = 160;
    }
    if (cameraAngle < 20) {
      servoDelta = -servoDelta;
      cameraAngle = 20;
    }
  }
}

void set_servo_angle(int servoAngle) {
  srvMillis = millis();
  pinMode(SRVO_PIN, OUTPUT);
  println("SERVO: on", 1);
  myservo.write(servoAngle);
  print("SET camera angle=", 1);
  println(toString(servoAngle), 0);
}

void show_lt_values() {
  // transmit line following sensor values
  lt_r = LT_R;
  if (lt_r != previous_lt_r) {
    print("LT_R=", 1);
    println(toString(lt_r), 0);
    previous_lt_r = lt_r;
  }
  lt_m = LT_M;
  if (lt_m != previous_lt_m) {
    print("LT_M=", 1);
    println(toString(lt_m), 0);
    previous_lt_m = lt_m;
  }
  lt_l = LT_L;
  if (lt_l != previous_lt_l) {
    print("LT_L=", 1);
    println(toString(lt_l), 0);
    previous_lt_l = lt_l;
  }
}

void transmit_sensor_data(int servoSpeed) {
  if (! initialized) {
    return;
  }

  // point the servo to the next cameraAngle
  // transmit the cameraAngle value
  move_servo = (millis() - srvMillis > servoSpeed) ? 1 : 0;
  if (move_servo) {
    increment_angle();
    if (previousCameraAngle != cameraAngle) {
      set_servo_angle(cameraAngle);
    }
    previousCameraAngle = cameraAngle;
  }

  // turn the servo off when not in use
  if (srvMillis != 0L && ((millis() + 3000L) > srvMillis)) {
    srvMillis = 0L;
    pinMode(SRVO_PIN, INPUT); // the idea here is to turn off the servo when not in use.  stops shaking.
    println("SERVO: off", 1);
  }

  // transmit distance sensor value
  get_distance_using_bounce_wrapper();
  if (is_outside_delta(distance, previousDistance, distanceDelta)
   || (cameraAngle != previousDistanceAngle)) {

    if (cameraAngle < 65) {
      leftDistance = distance;
      print("Distance Left=", 1);
      println(toString(leftDistance), 0);
    }
    else if (cameraAngle > 115) {
      rightDistance = distance;
      print("Distance Right=", 1);
      println(toString(rightDistance), 0);
    }
    else {
      aheadDistance = distance;
      print("Distance Ahead=", 1);
      println(toString(aheadDistance), 0);
    }
    previousDistance = distance;
    previousDistanceAngle = cameraAngle;
  }

  show_lt_values();
}

boolean is_outside_delta(int distance1, int distance2, int theDelta) {
  if (distance1 == distance2) {
    return 0;
  }
  else if (distance1 < distance2) {
    return ((distance1 + theDelta) < distance2);
  }
  else {
    return ((distance2 + theDelta) < distance1);
  }
}

void printdate() {
  snprintf(buffer, sizeof(buffer), "%02d/%02d/%4d %02d:%02d:%02d ", month(), day(), year(), hour(), minute(), second());
  Serial.print(buffer);
}

void print(char *output, boolean showDate) {
  if (showDate) {
    printdate();
  }
  Serial.print(output);
}

void println(char *output, boolean showDate) {
  if (showDate) {
    printdate();
  }
  Serial.println(output);
}

char * toString(unsigned long num) {
  snprintf(number, sizeof(number), "%ld", num);
  return number;
}

void setArduinoTime() {
  // time message is a header and ten ascii digits
  int count = 0;
  time_t pctime = 0;
  while (count <= TIME_MSG_LEN) {
    if (Serial.available()) {
      char c = Serial.read();
      Serial.print(c);
      if (c == SET_TIME) {
        count = 0;
      }
      else if (c == TIME_HEADER) {
        count = 1;
      }
      else if (c == '\n') {
          count += 1;
      }
      else {
        if (c >= '0' && c <= '9') {
          pctime = (10 * pctime) + (c - '0') ; // digit to number
          count += 1;
        }
      }
    }
  }
  setTime(pctime); // sync Arduino clock
  adjustTime(adjustTimeZone);
  println("SET_TIME: completed", 1);
  initialized = 1;
}

boolean execute_command(int cmd) {
  boolean valid = 0;
  if (cmd != 0) {
    print("got cmd=", 1);
    println(toString(cmd), 0);
    if (cmd == SET_TIME) {
      valid = function_set_time();
    }
    else if (initialized) {
      switch(cmd) {
        case SET_JOYSTICK:
          valid = function_set_joystick();
          break;
        case UPARROW:
        case GAME_W:
          valid = function_up();
          break;
        case DOWNARROW:
        case GAME_S:
          valid = function_down();
          break;
        case LEFTARROW:
        case GAME_A:
          valid = function_left();
          break;
        case RIGHTARROW:
        case GAME_D:
          valid = function_right();
          break;
        case ALLSTOP:
        case GAME_STOP:
          valid = function_ok();
          break;
        case DO_FUNCTION_ONE:
          valid = function_one();
          break;
        case DO_FUNCTION_TWO:
          valid = function_two();
          break;
        case DO_FUNCTION_THREE:
          valid = function_three();
          break;
        case DO_FUNCTION_FOUR:
          valid = function_four();
          break;
        case DO_FUNCTION_FIVE:
          valid = function_five();
          break;
        case DO_FUNCTION_SIX:
          valid = function_six();
          break;
        case DO_FUNCTION_SEVEN:
          valid = function_seven();
          break;
        case DO_FUNCTION_EIGHT:
          valid = function_eight();
          break;
        case DO_FUNCTION_NINE:
          valid = function_nine();
          break;
        case DO_FUNCTION_ZERO:
          valid = function_zero();
          break;
        case DO_FUNCTION_STAR:
          valid = function_star();
          break;
        case DO_FUNCTION_SHARP:
          valid = function_sharp();
          break;
      }
    }
  }
  return valid;
}

//-----------------------------------------------------------------
// CUSTOM IR-REMOTE and SERIAL COMMANDS

boolean function_set_time() {
  println("fn_set_time: do set", 1);
  // setup to interpret the next Serial input as date and time
  read_time_value = 1;
  return 1;
}

boolean function_set_joystick() {
  //println("fn_set_joystick: do set", 1);
  read_joystick = 1;
  return 1;
}

boolean function_up() {
  println("fn_up: go forward", 1);
  forward();
  return 1;
}

boolean function_left() {
  println("fn_left: go left", 1);
  left();
  return 1;
}

boolean function_right() {
  println("fn_right: go right", 1);
  right();
  return 1;
}

boolean function_down() {
  println("fn_down: go back", 1);
  back();
  return 1;
}

// reset to defaults
boolean function_ok() {
  println("fn_ok: STOP", 1);
  stop();
  state = "default";
  servoDelta = 0;
  return 1;
}

// look right
boolean function_one() {
  println("fn_one: look toward left", 1);
  set_angle(55, servoDelta);
  return 1;
}

// look ahead
boolean function_two() {
  println("fn_two: look ahead", 1);
  set_angle(90, servoDelta);
  return 1;
}

// look left
boolean function_three() {
  println("fn_three: look toward right", 1);
  set_angle(125, servoDelta);
  return 1;
}

// look full right
boolean function_four() {
  println("fn_four: look full left", 1);
  set_angle(20, servoDelta);
  return 1;
}

// look full left
boolean function_six() {
  println("fn_six: look full right", 1);
  set_angle(160, servoDelta);
  return 1;
}

// go slower
boolean function_seven() {
  print(toString(joystick), 0);
  if (joystick > 0) {
     --joystick;
  }
  else {
    println("-limit", 1);
  }
  print("fn_seven: (slower) joystick=", 1);
  return 1;
}

// sensors: return all sensor and status data
boolean function_eight() {
  println("fn_eight: 'sensors'", 1);
  print("Last Distance: ", 1);
  println(toString(distance), 0);
  print("Ahead Distance: ", 1);
  println(toString(aheadDistance), 0);
  print("Left Distance: ", 1);
  println(toString(leftDistance), 0);
  print("Right Distance: ", 1);
  println(toString(rightDistance), 0);
  print("LT_R: ", 1);
  println(toString(lt_r), 0);
  print("LT_M: ", 1);
  println(toString(lt_m), 0);
  print("LT_L: ", 1);
  println(toString(lt_l), 0);
  print("Throttle: ", 1);
  println(toString(DEFAULT_SPEED + speed_delta()), 0);
  snprintf(camera, sizeof(camera), "Camera Angle: %d, Motion: %d ", cameraAngle, servoDelta);
  println(camera, 1);
  show_state();
  return 1;
}

void show_state() {
  char *dir = "";
  if (direction == ALLSTOP) {
    dir = "STOP";
  }
  else if (direction == UPARROW) {
    dir = "AHEAD";
  }
  else if (direction == DOWNARROW) {
    dir = "BACK";
  }
  else if (direction == RIGHTARROW) {
    dir = "RIGHT";
  }
  else if (direction == LEFTARROW) {
    dir = "LEFT";
  }
  snprintf(status, sizeof(status), "State: %s %s, Joystick: %s %d", state, motion, dir, (int) joystick);
  println(status, 1);
}

// go faster
boolean function_nine() {
  if (joystick < 9) {
    ++joystick;
  }
  else {
    println("+limit", 1);
  }
  print("fn_nine: (faster) joystick=", 1);
  print(toString(joystick), 0);
  return 1;
}

// map your world
boolean function_five() {
  if (*state != 'm') {
    state = "map";
    servoDelta = 10;
    println("fn_five: 'map'", 1);
  }
  // FIXME: communicate with the Nano to map everything
  return 1;
}

// run security monitor protocol
boolean function_zero() {
  if (*state != 's') {
    state = "security";
    println("fn_zero: 'monitor'", 1);
  }
  // FIXME
  return 1;
}

// run Elegoo collision avoidance modified for Serial interrupt
boolean function_star() {
  if (*state != 'a') {
    state = "avoid";
    println("fn_star: 'avoid'", 1);
  }
  set_servo_angle(90);
  delay(500);
  aheadDistance = get_distance();
  if (aheadDistance <= 20) {
    ++avoidState;
    switch (avoidState) {
      case 1: {
        stop();
        break;
      }
      case 2: {
        delay(500);
        set_servo_angle(10);
        break;
      }
      case 3: {
        delay(1000);
        rightDistance = get_distance();
        break;
      }
      case 4: {
        delay(500);
        set_servo_angle(90);
        break;
      }
      case 5: {
        delay(1000);
        set_servo_angle(160);
        break;
      }
      case 6: {
        delay(1000);
        leftDistance = get_distance();
        break;
      }
      case 7: {
        delay(500);
        set_servo_angle(90);
        break;
      }
      case 8: {
        delay(1000);
        if (rightDistance > leftDistance) {
          right();
          if (Serial.available()) {
            return 1;
          }
          delay(360);
        }
        else if (rightDistance < leftDistance) {
          left();
          if (Serial.available()) {
            return 1;
          }
          delay(360);
        }
        else if ((rightDistance <= 20) || (leftDistance <= 20)) {
          back();
          if (Serial.available()) {
            return 1;
          }
          delay(170);
        }
        else {
          forward();
        }
        break;
      }
    }
  }
  else {
      forward();
  }
  return 1;
}

// run Elegoo line following modified for Serial interrupt
// FIXME: stop() case must talk with Jetson Nano for instructions
boolean function_sharp() {
  if (*state != 'f') {
    state = "following";
    println("fn_sharp: 'following'", 1);
  }
  ++followState;
  show_lt_values();
  switch (followState) {
    case 1: {
      if (LT_M) {
        forward();
      }
      else if (! LT_L && ! LT_M && ! LT_R) {
        stop();
      }
      break;
    }
    case 2: {
      if (LT_R) {
        right();
        while(LT_R) {
          if (Serial.available()) {
            break;
          }
          if (! LT_L && ! LT_M && ! LT_R) {
            stop();
            break;
          }
        }
      }
      else if (! LT_L && ! LT_M && ! LT_R) {
        stop();
      }
      break;
    }
    case 3: {
      if (LT_L) {
        left();
        while(LT_L) {
          if (Serial.available()) {
            break;
          }
          if (! LT_L && ! LT_M && ! LT_R) {
            stop();
            break;
          }
        }
      }
      else if (! LT_L && ! LT_M && ! LT_R) {
        stop();
      }
      followState = 0;
      break;
    }
    defalt: {
      followState = 0;
    }
  }
  return 1;
}

